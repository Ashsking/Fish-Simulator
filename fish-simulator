//Ashutosh Niraula
//I added a mouse click which basically changes the direction of the fish.
//I also reduced the number of fish and you can only see red, blue and green fish. 
//I also made the triangular headed fish swim faster than the round headed fish.
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.util.Timer;
import java.util.TimerTask;

@SuppressWarnings("serial")
public class Fish extends Component {

    private final static RandomRange rand = new RandomRange();
    private Shape shape = randomShape();
    private Color color = generateColor();
    private RandomRange move = new RandomRange(0, 1, -1, 1);
    private int sloth = calculateSpeed();
    private int direction = 1;

    private static Polygon randomShape() {
        int[][] x = { { 0, 30, 40, 50, 60, 70, 90, 100, 115, 130,
                        115, 100, 90, 70, 60, 50, 40, 30, 0, 15 },
                    { 0, 30, 40, 50, 60, 70, 90, 100, 112, 115,
                        112, 100, 90, 70, 60, 50, 40, 30, 0, 5 } };
        int[][] y = { { 5, 15, 10, 7, 0, 7, 12, 15, 22, 25,
                        28, 35, 40, 43, 50, 43, 40, 35, 45, 25 },
                    { 5, 15, 10, 7, 0, 7, 11, 15, 22, 25,
                        28, 35, 40, 43, 52, 43, 40, 35, 45, 25 } };
        int i = rand.nextInt(2);
        return new Polygon(x[i], y[i], x[i].length);
    }

    private Color generateColor() {
        int colorIndex = rand.nextInt(3); // Choose from 3 different colors
        switch (colorIndex) {
            case 0:
                return Color.RED;
            case 1:
                return Color.BLUE;
            case 2:
                return Color.GREEN;
            default:
                return Color.BLACK; // Default color
        }
    }

    private int calculateSpeed() {
        if (shape instanceof Polygon) {
            Polygon poly = (Polygon) shape;
            // Triangular-shaped fish move faster
            if (poly.npoints == 3) {
                return rand.nextInt(5, 15); // Faster speed range
            }
        }
        // Other shapes move slower
        return rand.nextInt(20, 32); // Slower speed range
    }

    public Fish() {
        setBounds(0, 0, shape.getBounds().width, shape.getBounds().height);
    }

    public Fish(int x, int y, Color color) {
        setBounds(x, y, shape.getBounds().width, shape.getBounds().height);
        this.color = color;
    }

    public Fish(int x, int y, int dir) {
        setBounds(x, y, shape.getBounds().width, shape.getBounds().height);
        if (dir < 1) changeDirection();
    // Add mouse listener to change direction when clicked
        addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent e) {
            changeDirection(); // Changed fish direction when clicked
        }
    });
}

    public Fish changeDirection() {
        shape = new AffineTransform(-1, 0, 0, 1, getWidth(), 0).createTransformedShape(shape);
        direction = -direction;
        return this;
    }

    @Override
    public void paint(Graphics g) {
        g.setColor(color);
        ((Graphics2D) g).fill(shape);
    }

    public void swim() {
        if (sloth > 0 && move.nextInt(sloth) != 0) return;

        setLocation(getX() + direction * move.deltaX(), getY() + move.deltaY());
        Container water = getParent();
        if (water == null) return;
        int right = getParent().getWidth() - getWidth();
        int bottom = getParent().getHeight() - getHeight();
        if (getX() > right) {
            changeDirection();
            setLocation(right, getY() + move.deltaY());
        } else if (getX() < 0) {
            changeDirection();
            setLocation(0, getY() + move.deltaY());
        }
        if (getY() > bottom) {
            setLocation(getX(), bottom);
        } else if (getY() < 0) {
            setLocation(getX(), 0);
        }
    }

    public void start() {
        new Timer().scheduleAtFixedRate(new Task(), 0, sloth);
    }

    class Task extends TimerTask {
        public void run() {
            swim();
        }
    }
}
